##############################
#  _
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  <
#  \__|_| |_| |_|\__,_/_/\_\
#
#############################
#
# COPY AND PASTE
# http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
#

# use vim motion keys while in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe "reattach-to-user-namespace pbcopy"

if-shell -b '[ $(uname -o) = "Darwin" ]' {
  #bind ']' to use pbpaste
  bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"
}

# Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#
############################################################################

############################################################################
# Reset Prefix
############################################################################
set -g prefix C-a
bind-key a send-prefix # for nested tmux sessions

############################################################################
# Global options
############################################################################
# large history
set-option -g history-limit 50000
set-option -g focus-events on

# address vim mode switching delay (http://superuser.com/a/252717/65504)
set-option -s escape-time 0

# colors
set-option -g default-terminal "screen-256color" #"xterm-256color" # "screen-256color"
# set -ga terminal-overrides ",xterm-256color:Tc"

# --------------------------------------------------
# KSK Original
# --------------------------------------------------
# set-option -sa terminal-overrides ',screen-256color:RGB'

# --------------------------------------------------
# KSK working
# --------------------------------------------------
set-option -sa terminal-overrides ',xterm*:Tc'


set -g mode-style bg=black
set -g pane-active-border-style bg=blue
set -g window-status-current-style bg=red,fg=white,reverse

# basic settings
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on

# Automatically set window title
set-window-option -g automatic-rename

set -g pane-border-status bottom
set -g pane-border-format "#{pane_index} #{pane_title}"


# use mouse # More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
setw -g mouse on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# vi movement keys
# set-option -g status-keys vi

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set-option -g status-keys emacs

# focus events enabled for terminals that support them
set-option -g focus-events on

############################################################################
# status bar
############################################################################
#set-option -g status-utf8 on
# set-option -g status-bg black # colour213 # pink
# set-option -g status-fg white
# set-option -g status-justify right
set-option -g status-interval 5
# set-option -g status-left-length 30
# set-option -g status-left '#[fg=magenta]» #[fg=blue,bold]#t#[default]'
# set-option -g status-right '#[fg=red,bold][[ #(git branch) branch ]] #[fg=cyan]»» #[fg=blue,bold]###s #[fg=magenta]%r %m-%d#(acpi | cut -d ',' -f 2)#[default]'
# set-option -g visual-activity on

# tmux messages are displayed for 4 seconds
set-option -g display-time 4000

# Powerline status bar
run-shell "powerline-daemon -q"
source "${POWERLINE_DIR}/bindings/tmux/powerline.conf"

# Status Bar on Top
set -g status-position top

# Titles (window number, program name, active (or not)
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T'


############################################################################
# Unbindings
############################################################################
unbind j
unbind C-b # unbind default leader key
unbind '"' # unbind horizontal split
unbind %   # unbind vertical split


############################################################################
# Bindings
############################################################################
# reload tmux conf
bind-key r source-file ~/.tmux.conf

# Global
set -s command-alias[0] ml='source-file ~/.tmux/machine-learning'
set -s command-alias[1] irssi='source-file ~/.tmux/irssi'
set -s command-alias[2] vim-config='source-file ~/.tmux/vim-config'
set -s command-alias[3] tmux-dev='source-file ~/.tmux/tmux-dev'
set -s command-alias[4] notes='source-file ~/.tmux/notes'

set -s command-alias[5] llama-chat='source-file ~/.tmux/llama-chat'
set -s command-alias[6] langchain-cuda-playground='source-file ~/.tmux/langchain-cuda-playground'
set -s command-alias[7] langchain-mlx-playground='source-file ~/.tmux/langchain-mlx-playground'
set -s command-alias[8] llama-index-playground='source-file ~/.tmux/llama-index-playground'
set -s command-alias[9] scala-dev='source-file ~/.tmux/scala-dev'
set -s command-alias[10] chat-bot='source-file ~/.tmux/llama-cpp'

# Source local bindings if they exist
if-shell -b '[ -f ~/.tmux/local/bindings.conf ]' {
  source ~/.tmux/local/bindings.conf
}

# new split in current pane (horizontal / vertical)
bind-key - split-window -v # split pane horizontally
bind-key \\ split-window -h # split pane vertically

# list panes
bind-key Space list-panes

# break-pane
bind-key Enter break-pane

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"
bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

#previous pane
bind-key -n C-up prev
bind-key -n C-left prev

#next pane
bind-key -n C-right next
bind-key -n C-down next

# fzf
#bind-key 0 run "tmux split-window -l 12 'zsh -ci ftpane; sleep 50'"

############################################################################
# windows
############################################################################
bind C-j previous-window
bind C-k next-window
bind-key C-a last-window # C-a C-a for last active window
bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
setw -g aggressive-resize on

############################################################################
# panes
############################################################################
# Navigation ---------------------------------------------------------------
# use the vim motion keys to move between panes
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Resizing ---------------------------------------------------------------
#bind-key C-h resize-pane -L
#bind-key C-j resize-pane -D
#bind-key C-k resize-pane -U
#bind-key C-l resize-pane -R


############################################################################
# layouts
############################################################################
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window

bind-key u next-layout

# focus on first window
# select-window -t 0
